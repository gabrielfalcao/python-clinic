# tasks file for hidden-service
- name: ensure the repository key is present
  apt_key:
    data: "{{ lookup('file', 'torproject.asc') }}"
    # Explicitly declaring keyring path to match what's configured by the
    # `deb.torproject.org-keyring` package.
    keyring: /etc/apt/trusted.gpg.d/deb.torproject.org-keyring.gpg
    state: present

- name: ensure the required repository is present
  apt_repository:
    repo: "deb http://deb.torproject.org/torproject.org {{ ansible_distribution_release }} main"

- name: ensure tor is installed
  apt:
    pkg: tor
    state: "{{ hidden_service_tor_apt_state }}"

- name: install extra tor packages
  apt:
    pkg: "{{ item }}"
    state: present
  with_items: "{{ hidden_service_apt_packages }}"

- name: ensure hidden service directory is present
  file:
    path: "/var/lib/tor/{{ item.key }}/"
    owner: debian-tor
    group: debian-tor
    mode: 0700
    state: directory
  with_dict: "{{ hidden_service_services }}"
  register: hidden_service_directory_creation_result
  when: item.value.hidden_service_state|default('present') == 'present'

- name: ensure hidden service configuration is latest
  template:
    src: torrc.j2
    dest: /etc/tor/torrc
    owner: root
    group: root
    mode: 0644
  notify:
    - restart tor

- name: ensure hostname file are present
  template:
    src: hostname
    dest: "/var/lib/tor/{{ item.key }}/hostname"
    owner: debian-tor
    group: debian-tor
    mode: 0600
    backup: yes
  with_dict: "{{ hidden_service_services }}"
  when: item.value.hidden_service_hostname is defined and
        item.value.hidden_service_hostname and
        item.value.hidden_service_state|default('present') == 'present'
  notify: restart tor

- name: ensure private_key file are present
  template:
    src: private_key
    dest: "/var/lib/tor/{{ item.key }}/private_key"
    owner: debian-tor
    group: debian-tor
    mode: 0600
    backup: yes
  with_dict:  "{{ hidden_service_services }}"
  when: item.value.hidden_service_private_key is defined and
        item.value.hidden_service_private_key and
        item.value.hidden_service_state|default('present') == 'present'
  notify: restart tor

- name: ensure hidden service directory is absent
  file:
    path: "/var/lib/tor/{{ item.key }}/"
    owner: debian-tor
    group: debian-tor
    mode: 0700
    state: absent
  with_dict: "{{ hidden_service_services }}"
  when: item.value.hidden_service_state|default('present') == "absent"

  # The hostname file won't be created until the tor service
  # is reloaded, so bounce it before the `wait_for` task.
- name: reload tor if service was created
  service:
    name: tor
    state: restarted
  when: hidden_service_directory_creation_result|changed

- name: wait for hidden service
  wait_for:
    path: "/var/lib/tor/{{ item.key }}/hostname"
  with_dict: "{{ hidden_service_services }}"

- name: read hidden service url
  command: cat "/var/lib/tor/{{ item.key }}/hostname"
  register: hidden_service_hostname_results
  changed_when: false
  with_dict: "{{ hidden_service_services }}"
  # when: not item.value.hidden_service_hostname|default(false)

- name: display hidden service url
  debug:
    msg: >-
      {{ lookup('template', role_path+'/templates/display_hostnames.j2') }}

# dirty hack to stop tor, when server is not the current hidden service,  restart handler above , would start tor with same url and private key on two hosts
- name: stop tor, if two servers are up, but only one should act as HS (for example jabber servers)
  service:
     name: tor
     state: stopped
  notify: stop tor
  when: not hidden_service_active

- include_tasks: monit.yml
  when: hidden_service_monit_enabled
